use super::cells::Cell;

mod tools;
pub use tools::Type;
pub use tools::Layout;
use tools::Type::*;

/// main stage
pub struct Canvas {
	board : Vec<Option<Cell>>,
	layout : Layout,
	/// for update
	updating_vec : Vec<Option<usize>>, // Vec < multiplicity >

	dead_cells : Vec<bool>, // Vec < dead? >
}

impl Canvas { // constructure functions 
	pub fn new(m : usize, n : usize, height : usize) -> Canvas {
		let layout = Layout::new(m, n, height);
		let dead_cells : Vec<bool> = (0..layout.get_len()).map(|_| {false}).collect();

		Canvas {
			board : Vec::new(),
			layout,

			updating_vec : Vec::new(),
			dead_cells,
		}
	}
}

impl Canvas { // help functions
	fn is_dead_at(&self, index : usize) -> bool {
		self.dead_cells[index] // !
	}

	fn check_dead(&self, index : usize) {
		// I may comment it to speed up
		if self.is_dead_at(index) {
			panic!("try to activate a dead cell")
		}
	}

	/// mark the cell and update it in next generation
	fn active_cell(&mut self, index : usize) { // !
		self.check_dead(index);

		let saw = &mut self.updating_vec[index];
		if saw.is_none() {
			*saw = Some(0);
		}
	}

	fn kill_cell(&mut self, index : usize) {
		self.dead_cells[index] = true;
	}

	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	fn update_stack(&mut self, index : usize) {
		self.active_cell(index);
		for e in self.layout.adjecents(index) {

			if !self.dead_cells[e] {
				// + refine
				self.active_cell(e);
				if let Some(multi) = self.updating_vec.get_mut(e).unwrap() {
					*multi += 1;
				}
			}
		}
		eprintln!("updating_vec:{:?}", self.updating_vec);
	}

	fn clear_updating_list(&mut self) {
		self.updating_vec.clear();
		self.updating_vec.append(&mut (0..self.get_len()).map(|_| -> Option<usize> {None}).collect());

	}

	fn get_len(&self) -> usize {
		self.layout.get_len()
	}
}

use std::thread;
impl Canvas {
	pub fn update(&mut self) -> Result<(), &'static str> {
		// + refine
		let mut handles = Vec::new();
		
		eprintln!("updating_vec:{:?}", self.updating_vec); // !
		for (index, &multi) in self.updating_vec.iter().enumerate() {
			//.filter(|(_, &multi)| {multi != 0}) { // + refine
			if let Some(multi) = multi {
				let mut cell = self.board[index].take().unwrap();
				handles.push(thread::spawn(move || {
					cell.recv_info(multi);
					(index, cell) // listen
				}));
			}
		}
		
		self.clear_updating_list();
		
		let mut temp_vec = Vec::new();
		for handle in handles {
			temp_vec.push(handle.join().unwrap());
		}

		// --- all counters have been fixed here ---
		for (index, mut cell) in temp_vec {
			if cell.update()? {
				// add all adjecents into stack
				self.update_stack(index);
			}
			self.board[index].replace(cell);
		}

		Ok(())
	}
}

use super::states::State;
use std::sync::Weak;
impl Canvas {
	// + refine
	pub fn init(&mut self, states : Vec<&Option<Weak<dyn State>>>) {//-> Result<(), &'static str> {
		self.clear_updating_list();

		for index in 0..self.layout.get_len() {
			if let Some(mut cell) = self.board[index].take() {

				if let Some(state) = states[index].as_ref() {
					eprintln!("{}:{:?}", index, "");
					self.active_cell(index);
					if cell.set(&state.upgrade().unwrap()) {
						self.update_stack(index);
					}
					
					self.board[index].replace(cell);
				} else {
					self.board[index] = None;
					self.kill_cell(index);
				}
			} // cell might be none depends on the type of board
		}

		// Ok(())
	}
}

impl Canvas { // buildup
	pub fn set_type(&mut self, _type : Type) {
		self.layout.set_type(_type);
	}

	pub fn buildup_rect_board(&mut self) {
		self.set_type(Rect);
		self.buildup_board();
	}

	pub fn buildup_board(&mut self) {		
		// + the dead cells
		match self.layout.get_type() { // buildup the adjecents
			
			Rect => {
				for _ in 0.. self.get_len() {
					self.board.push(Some(Cell::new()));
				}
				for i in 0..self.get_len() { // + refine
					let vec_index : Vec<usize> = self.layout.adjecents(i);
					let mut vec_cell : Vec<Cell> = vec_index.iter().map(|&index| {self.board[index].take().unwrap()}).collect();

					self.board.get_mut(i).unwrap().as_mut().unwrap().append_adj(vec_cell.iter_mut().collect());
					
					for (index, cell) in vec_index.into_iter().zip(vec_cell.into_iter()) {
						self.board[index].replace(cell);
					}
				}
			},

			UnInitialized => panic!("undefined right now")
		}
	}
}

impl Canvas {// show infomations of this canvas
	pub fn count_updating(&self) -> usize {
		self.updating_vec.iter().filter(|option| option.is_some()).count()
	}
}

use std::fmt;
impl fmt::Debug for Canvas {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		let mut iterator = self.board.iter();
		for z in 0..self.layout.get_height() {
			writeln!(f, "level {}", z)?;

			for y in 0..self.layout.y_bound() {
				for x in 0..self.layout.x_bound() {
					// eprint!("{} ", self.layout.index_of(x, y, z)); // !
					write!(f, "{}", match iterator.next().unwrap() {
						Some(cell) => format!("{}:{:?}",
							match self.updating_vec[self.layout.index_of(x, y, z)] {
								Some(multi) => multi.to_string(),
								None => String::from(" "),
							},
							cell),
						None => String::from("\t")}
					)?;
				}
				write!(f, "\n")?;
			}
		}
		write!(f, "")
    }
}
impl fmt::Display for Canvas {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		// let mut iterator = self.board.iter().;
		for y in 0..self.layout.y_bound() {
			for x in 0..self.layout.x_bound() {
				write!(f, "{}", match self.board.get(self.layout.sceen_index_of(x, y)).unwrap() { Some(cell) => format!("{}", cell), None => String::from("\t")})?;
			}
			write!(f, "\n")?;
		}
		write!(f, "")
    }
}

