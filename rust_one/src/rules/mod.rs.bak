use crate::{On, Off};
use crate::cell::State;
use std::rc::{Rc, Weak};
// use std::cell::RefCell;
// use std::fmt;

pub struct Rule<T> where T : State {
	on  : Option<Rc< On>>,
    off : Option<Rc<Off>>,
    // state: Rc<T>,
}

impl Rule< On> {
    pub fn new(state: Rc< On>) -> Rule< On> {
		Rule::< On> {
			on  : Some(Rc::clone(&state)),
			off : state.turn_off.as_ref().map(|s| Rc::clone(&s.upgrade().unwrap())),
			// state,
		}
    }
}
impl Rule<Off> {
    pub fn new(state: Rc<Off>) -> Rule<Off> {
		Rule::<Off> {
			off : Some(Rc::clone(&state)),
			on  :  state.turn_on.as_ref().map(|s| Rc::clone(&s.upgrade().unwrap())),
			// state,
		}
    }
}
impl<T : State> Rule<T> {
    pub fn  on(&self) -> Rc< On> {
		if let Some(v) = self.on.clone() {
			v
		} else {
			panic!("I don't know");
		}
    }
	
	pub fn off(&self) -> Rc<Off> {
		if let Some(v) = self.off.clone() {
			v
		} else {
			panic!("I don't know");
		}
    }
}

// pub struct Rule;
// impl Rule {
// 	fn  B2_S23(state : bool) ->  impl State {
// 		let mut  on =  On::from(vec![false, false,  true,  true, false]);
// 		let mut off = Off::from(vec![false,  true,  false,  false, false]);
// 		on.turn_off = Some(Rc::downgrade(&Rc::new(off)));
// 		off.turn_on = Some(Rc::downgrade(&Rc::new( on)));
// 		if state {
// 			on
// 		} else {
// 			off
// 		}
// 	}

// 	pub fn  B2_S23_on() ->  On {
// 		let mut  on =  On::from(vec![false, false,  true,  true, false]);
// 		let mut off = Off::from(vec![false,  true,  false,  false, false]);
// 		on.turn_off = Some(Rc::downgrade(&Rc::new(off)));
// 		off.turn_on = Some(Rc::downgrade(&Rc::new( on)));
// 		on
// 	}

// 	pub fn B2_S23_off() -> Off {

// 	}
// }

