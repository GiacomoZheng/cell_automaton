use super::Cell;

use std::rc::Weak;
#[allow(non_snake_case)]
pub struct Canvas {
	pub board : Vec<Option<Cell>>,

	pub m : usize,
	pub n : usize,
	pub Type : &'static str,

	// /// for update
	// pub cell_stack : Vec<&'a Cell>
}

impl Canvas {
	pub fn new(m : usize, n : usize) -> Canvas{
		Canvas {
			board : Vec::new(),
			m,
			n,
			Type : ""
		}
	}
}
use super::State;
impl Canvas {
	pub fn init(&mut self, states : Vec<&Option<Weak<dyn State>>>) -> Result<(), &'static str> {
		let mut iterator = self.board.iter_mut().map(|opt| opt.as_mut())
							.zip(states.iter().map(|opt| opt.as_ref()))
							.filter(|(saw_cell, _)| saw_cell.is_some());
		while let Some((Some(cell), saw_state)) = iterator.next() {
			if let Some(state) = saw_state {
				cell.set(&state.upgrade().unwrap());
			} else {
				return Err("wrong initialization : need more configs");
			}
		}
		Ok(())
	}

	pub fn update(&mut self) -> Result<(), &'static str> {

	}
}
impl Canvas { // help functions

}
use super::tools::Layout;
impl Canvas { // buildup
	pub fn buildup_rect_board(& mut self) {
		self.Type = "rect";

		for _ in 0.. self.n*self.m {
			self.board.push(Some(Cell::new()));
		}

		
		{ // buildup the adjecents
			let lay = Layout("rect", self.m, self.n);

			for i in 0..self.m * self.n { // + need improvememnt
				let vec_index : Vec<usize> = lay.adjecents(i);
				let mut vec_cell : Vec<Cell> = vec_index.iter().map(|&index| {self.board[index].take().unwrap()}).collect();

				self.board.get_mut(i).unwrap().as_mut().unwrap().append_adj(vec_cell.iter_mut().collect());
				
				for (index, cell) in vec_index.into_iter().zip(vec_cell.into_iter()) {
					self.board[index].replace(cell);
				}
			}
		}
	}
}

use std::fmt;
impl fmt::Debug for Canvas {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		let mut iterator = self.board.iter();
		for _ in 0..self.n {
			for _ in 0..self.m {
				write!(f, "{}", match iterator.next().unwrap() { Some(cell) => format!("{:?}", cell), None => String::from("\t")})?;
			}
			write!(f, "\n")?;
		}
		write!(f, "")
    }
}
impl fmt::Display for Canvas {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		let mut iterator = self.board.iter();
		for _ in 0..self.n {
			for _ in 0..self.m {
				write!(f, "{}", match iterator.next().unwrap() { Some(cell) => format!("{}", cell), None => String::from("\t")})?;
			}
			write!(f, "\n")?;
		}
		write!(f, "")
    }
}